package scan

import (
	"sort"

	"dpCall/controller/api"
	"dpCall/share/utils"
)

var complianceMetas []api.RESTBenchMeta
var complianceMetaMap map[string]api.RESTBenchMeta

func GetComplianceMeta() ([]api.RESTBenchMeta, map[string]api.RESTBenchMeta) {
	if complianceMetas == nil || complianceMetaMap == nil {
		complianceMetaMap = make(map[string]api.RESTBenchMeta)

		var all []api.RESTBenchMeta

		for _, item := range cis_items {
			all = append(all, api.RESTBenchMeta{RESTBenchCheck: item})
		}
		for _, item := range docker_image_cis_items {
			all = append(all, api.RESTBenchMeta{RESTBenchCheck: item})
		}

		for i, _ := range all {
			item := &all[i]
			item.Tags = make([]string, 0)
			if compliancePCI.Contains(item.TestNum) {
				item.Tags = append(item.Tags, api.ComplianceTemplatePCI)
			}
			if complianceGDPR.Contains(item.TestNum) {
				item.Tags = append(item.Tags, api.ComplianceTemplateGDPR)
			}
			if complianceHIPAA.Contains(item.TestNum) {
				item.Tags = append(item.Tags, api.ComplianceTemplateHIPAA)
			}
			if complianceNIST.Contains(item.TestNum) {
				item.Tags = append(item.Tags, api.ComplianceTemplateNIST)
			}

			sort.Strings(item.Tags)
			complianceMetaMap[item.TestNum] = *item
		}

		sort.Slice(all, func(i, j int) bool { return all[i].TestNum < all[j].TestNum })
		complianceMetas = all
	}

	return complianceMetas, complianceMetaMap
}

var complianceHIPAA utils.Set = utils.NewSet(
	// trusted user
	"D.1.2.2",
	// audit
	"D.1.2.3", "D.1.2.4", "D.1.2.5", "D.1.2.6", "D.1.2.7", "D.1.2.8", "D.1.2.9", "D.1.2.10", "D.1.2.11", "D.1.2.12",

	// insecure registry, tls, no new privileges
	"D.2.4", "D.2.6", "2.17",

	// file mode, owner
	"D.3.1", "D.3.2", "D.3.3", "D.3.4", "D.3.5", "D.3.6", "D.3.7", "D.3.8", "D.3.9", "D.3.10",
	"D.3.11", "D.3.12", "D.3.13", "D.3.14", "D.3.15", "D.3.16", "D.3.17", "D.3.18", "D.3.19", "D.3.20",
	"D.3.21", "D.3.22",

	// privilege, mount, ssh (5.6)
	"D.5.4", "D.5.5", "D.5.6", "D.5.7", "D.5.17", "D.5.25", "D.5.31",

	// host ns shared
	"D.5.9", "D.5.12", "D.5.15", "D.5.16", "D.5.20", "D.5.30",

	// master file mode, owner
	"K.1.1.1", "K.1.1.2", "K.1.1.3", "K.1.1.4", "K.1.1.5", "K.1.1.6", "K.1.1.7", "K.1.1.8", "K.1.1.9", "K.1.1.10",
	"K.1.1.11", "K.1.1.12", "K.1.1.13", "K.1.1.14", "K.1.1.15", "K.1.1.16", "K.1.1.17", "K.1.1.18", "K.1.1.19", "K.1.1.20",
	"K.1.1.21",

	// token, cert, auth
	"K.1.2.1", "K.1.2.2", "K.1.2.3", "K.1.2.4", "K.1.2.5", "K.1.2.6", "K.1.2.7", "K.1.2.8", "K.1.2.9",
	// adm. ctrl.
	"K.1.2.10", "K.1.2.11", "K.1.2.12", "K.1.2.13", "K.1.2.14", "K.1.2.15", "K.1.2.16", "K.1.2.17",
	// secure port
	"K.1.2.18", "K.1.2.19", "K.1.2.20",
	// audit
	"K.1.2.22", "K.1.2.23", "K.1.2.24", "K.1.2.25",
	// service account, tls, encrypt
	"K.1.2.27", "K.1.2.28", "K.1.2.29", "K.1.2.30", "K.1.2.31", "K.1.2.32", "K.1.2.33", "K.1.2.34", "K.1.2.35",

	// service account
	"K.1.3.3", "K.1.3.4", "K.1.3.5", "K.1.3.6",

	// cert
	"K.2.1", "K.2.2", "K.2.3", "K.2.4", "K.2.5", "K.2.6", "K.2.7",

	// audit
	"K.3.2.1", "K.3.2.2",

	// worker: file mode owner
	"K.4.1.1", "K.4.1.2", "K.4.1.3", "K.4.1.4", "K.4.1.5", "K.4.1.6", "K.4.1.7", "K.4.1.8", "K.4.1.9", "K.4.1.10",

	// auth
	"K.4.2.1", "K.4.2.2", "K.4.2.3", "K.4.2.4", "K.4.2.6",
	// cert
	"K.4.2.10", "K.4.2.11", "K.4.2.12", "K.4.2.13",
)

var complianceNIST utils.Set = utils.NewSet(
	// trusted user
	"D.1.2.2",
	// audit
	"D.1.2.3", "D.1.2.4", "D.1.2.5", "D.1.2.6", "D.1.2.7", "D.1.2.8", "D.1.2.9", "D.1.2.10", "D.1.2.11", "D.1.2.12",

	// insecure registry, tls, no new privileges
	"D.2.4", "D.2.6", "2.17",

	// file mode, owner
	"D.3.1", "D.3.2", "D.3.3", "D.3.4", "D.3.5", "D.3.6", "D.3.7", "D.3.8", "D.3.9", "D.3.10",
	"D.3.11", "D.3.12", "D.3.13", "D.3.14", "D.3.15", "D.3.16", "D.3.17", "D.3.18", "D.3.19", "D.3.20",
	"D.3.21", "D.3.22",

	// image/container, root user, setuid, no secrets
	"D.4.1", "D.4.8", "D.4.10",
	"I.4.1", "I.4.8", "I.4.10",

	// privilege, mount, ssh (5.6)
	"D.5.4", "D.5.5", "D.5.6", "D.5.7", "D.5.17", "D.5.25", "D.5.31",

	// host ns shared
	"D.5.9", "D.5.12", "D.5.15", "D.5.16", "D.5.20", "D.5.30",

	// master file mode, owner
	"K.1.1.1", "K.1.1.2", "K.1.1.3", "K.1.1.4", "K.1.1.5", "K.1.1.6", "K.1.1.7", "K.1.1.8", "K.1.1.9", "K.1.1.10",
	"K.1.1.11", "K.1.1.12", "K.1.1.13", "K.1.1.14", "K.1.1.15", "K.1.1.16", "K.1.1.17", "K.1.1.18", "K.1.1.19", "K.1.1.20",
	"K.1.1.21",

	// token, cert, auth
	"K.1.2.1", "K.1.2.2", "K.1.2.3", "K.1.2.4", "K.1.2.5", "K.1.2.6", "K.1.2.7", "K.1.2.8", "K.1.2.9",
	// adm. ctrl.
	"K.1.2.10", "K.1.2.11", "K.1.2.12", "K.1.2.13", "K.1.2.14", "K.1.2.15", "K.1.2.16", "K.1.2.17",
	// secure port
	"K.1.2.18", "K.1.2.19", "K.1.2.20",
	// audit
	"K.1.2.22", "K.1.2.23", "K.1.2.24", "K.1.2.25",
	// service account, tls, encrypt
	"K.1.2.27", "K.1.2.28", "K.1.2.29", "K.1.2.30", "K.1.2.31", "K.1.2.32", "K.1.2.33", "K.1.2.34", "K.1.2.35",

	// service account
	"K.1.3.3", "K.1.3.4", "K.1.3.5", "K.1.3.6",

	// cert
	"K.2.1", "K.2.2", "K.2.3", "K.2.4", "K.2.5", "K.2.6", "K.2.7",

	// audit
	"K.3.2.1", "K.3.2.2",

	// worker: file mode owner
	"K.4.1.1", "K.4.1.2", "K.4.1.3", "K.4.1.4", "K.4.1.5", "K.4.1.6", "K.4.1.7", "K.4.1.8", "K.4.1.9", "K.4.1.10",

	// auth
	"K.4.2.1", "K.4.2.2", "K.4.2.3", "K.4.2.4", "K.4.2.6",
	// cert
	"K.4.2.10", "K.4.2.11", "K.4.2.12", "K.4.2.13",
)

var compliancePCI utils.Set = utils.NewSet(
	// trusted user
	"D.1.2.2",

	// insecure registry, tls, no new privileges
	"D.2.4", "D.2.6", "2.17",

	// file mode, owner
	"D.3.1", "D.3.2", "D.3.3", "D.3.4", "D.3.5", "D.3.6", "D.3.7", "D.3.8", "D.3.9", "D.3.10",
	"D.3.11", "D.3.12", "D.3.13", "D.3.14", "D.3.15", "D.3.16", "D.3.17", "D.3.18", "D.3.19", "D.3.20",
	"D.3.21", "D.3.22",

	// privilege, mount, ssh (5.6)
	"D.5.4", "D.5.5", "D.5.6", "D.5.7", "D.5.17", "D.5.25", "D.5.31",

	// host ns shared
	"D.5.9", "D.5.12", "D.5.15", "D.5.16", "D.5.20", "D.5.30",

	// master file mode, owner
	"K.1.1.1", "K.1.1.2", "K.1.1.3", "K.1.1.4", "K.1.1.5", "K.1.1.6", "K.1.1.7", "K.1.1.8", "K.1.1.9", "K.1.1.10",
	"K.1.1.11", "K.1.1.12", "K.1.1.13", "K.1.1.14", "K.1.1.15", "K.1.1.16", "K.1.1.17", "K.1.1.18", "K.1.1.19", "K.1.1.20",
	"K.1.1.21",

	// token, cert, auth
	"K.1.2.1", "K.1.2.2", "K.1.2.3", "K.1.2.4", "K.1.2.5", "K.1.2.6", "K.1.2.7", "K.1.2.8", "K.1.2.9",
	// adm. ctrl.
	"K.1.2.10", "K.1.2.11", "K.1.2.12", "K.1.2.13", "K.1.2.14", "K.1.2.15", "K.1.2.16", "K.1.2.17",
	// secure port
	"K.1.2.18", "K.1.2.19", "K.1.2.20",

	// service account, tls, encrypt
	"K.1.2.27", "K.1.2.28", "K.1.2.29", "K.1.2.30", "K.1.2.31", "K.1.2.32", "K.1.2.33", "K.1.2.34", "K.1.2.35",

	// service account
	"K.1.3.3", "K.1.3.4", "K.1.3.5", "K.1.3.6",

	// cert
	"K.2.1", "K.2.2", "K.2.3", "K.2.4", "K.2.5", "K.2.6", "K.2.7",

	// worker: file mode owner
	"K.4.1.1", "K.4.1.2", "K.4.1.3", "K.4.1.4", "K.4.1.5", "K.4.1.6", "K.4.1.7", "K.4.1.8", "K.4.1.9", "K.4.1.10",

	// auth
	"K.4.2.1", "K.4.2.2", "K.4.2.3", "K.4.2.4", "K.4.2.6",
	// cert
	"K.4.2.10", "K.4.2.11", "K.4.2.12", "K.4.2.13",
)

var complianceGDPR utils.Set = utils.NewSet(
	// trusted user
	"D.1.2.2",
	// audit
	"D.1.2.3", "D.1.2.4", "D.1.2.5", "D.1.2.6", "D.1.2.7", "D.1.2.8", "D.1.2.9", "D.1.2.10", "D.1.2.11", "D.1.2.12",

	// tls,
	"D.2.6",

	// file mode, owner
	"D.3.1", "D.3.2", "D.3.3", "D.3.4", "D.3.5", "D.3.6", "D.3.7", "D.3.8", "D.3.9", "D.3.10",
	"D.3.11", "D.3.12", "D.3.13", "D.3.14", "D.3.15", "D.3.16", "D.3.17", "D.3.18", "D.3.19", "D.3.20",
	"D.3.21", "D.3.22",

	// master file mode, owner
	"K.1.1.1", "K.1.1.2", "K.1.1.3", "K.1.1.4", "K.1.1.5", "K.1.1.6", "K.1.1.7", "K.1.1.8", "K.1.1.9", "K.1.1.10",
	"K.1.1.11", "K.1.1.12", "K.1.1.13", "K.1.1.14", "K.1.1.15", "K.1.1.16", "K.1.1.17", "K.1.1.18", "K.1.1.19", "K.1.1.20",
	"K.1.1.21",

	// token, cert, auth
	"K.1.2.1", "K.1.2.2", "K.1.2.3", "K.1.2.4", "K.1.2.5", "K.1.2.6", "K.1.2.7", "K.1.2.8", "K.1.2.9",
	// secure port
	"K.1.2.18", "K.1.2.19", "K.1.2.20",
	// audit
	"K.1.2.22", "K.1.2.23", "K.1.2.24", "K.1.2.25",
	// service account, tls, encrypt
	"K.1.2.27", "K.1.2.28", "K.1.2.29", "K.1.2.30", "K.1.2.31", "K.1.2.32", "K.1.2.33", "K.1.2.34", "K.1.2.35",

	// service account
	"K.1.3.3", "K.1.3.4", "K.1.3.5", "K.1.3.6",

	// cert
	"K.2.1", "K.2.2", "K.2.3", "K.2.4", "K.2.5", "K.2.6", "K.2.7",

	// audit
	"K.3.2.1", "K.3.2.2",

	// worker: file mode owner
	"K.4.1.1", "K.4.1.2", "K.4.1.3", "K.4.1.4", "K.4.1.5", "K.4.1.6", "K.4.1.7", "K.4.1.8", "K.4.1.9", "K.4.1.10",

	// auth
	"K.4.2.1", "K.4.2.2", "K.4.2.3", "K.4.2.4", "K.4.2.6",
	// cert
	"K.4.2.10", "K.4.2.11", "K.4.2.12", "K.4.2.13",
)

var docker_image_cis_items = map[string]api.RESTBenchCheck{
	"I.4.1": api.RESTBenchCheck{
		TestNum:     "I.4.1",
		Type:        "image",
		Catalog:     "image",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保已经为容器创建了用户",
	},
	"I.4.6": api.RESTBenchCheck{
		TestNum:     "I.4.6",
		Type:        "image",
		Catalog:     "image",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保HEALTHCHECK说明添加到容器镜像",
	},
	"I.4.8": api.RESTBenchCheck{
		TestNum:     "I.4.8",
		Type:        "image",
		Catalog:     "image",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保镜像中删除setuid和setgid权限",
	},
	"I.4.9": api.RESTBenchCheck{
		TestNum:     "I.4.9",
		Type:        "image",
		Catalog:     "image",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保在Dockerfiles中使用COPY而不是ADD",
	},
	"I.4.10": api.RESTBenchCheck{
		TestNum:     "I.4.10",
		Type:        "secret",
		Catalog:     "image",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保涉密信息不存储在dockerfile中",
	},
}

var cis_items = map[string]api.RESTBenchCheck{
	"D.1.1.1": api.RESTBenchCheck{
		TestNum:     "D.1.1.1",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "请确保容器主机已完成加固",
		Remediation: "",
	},
	"D.1.1.2": api.RESTBenchCheck{
		TestNum:     "D.1.1.2",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保更新docker到最新版本",
		Remediation: "",
	},
	"D.1.1.3": api.RESTBenchCheck{
		TestNum:     "D.1.1.3",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为Docker守护进程配置了审计",
		Remediation: "",
	},
	"D.1.1.4": api.RESTBenchCheck{
		TestNum:     "D.1.1.4",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/run/containerd配置了审计",
		Remediation: "",
	},
	"D.1.1.5": api.RESTBenchCheck{
		TestNum:     "D.1.1.5",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/var/lib/docker配置了审计",
		Remediation: "",
	},
	"D.1.1.6": api.RESTBenchCheck{
		TestNum:     "D.1.1.6",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/etc/docker配置了审计",
		Remediation: "",
	},
	"D.1.1.7": api.RESTBenchCheck{
		TestNum:     "D.1.1.7",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-docker.service配置了审计",
		Remediation: "",
	},
	"D.1.1.8": api.RESTBenchCheck{
		TestNum:     "D.1.1.8",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-containerd.sock配置了审计",
		Remediation: "",
	},
	"D.1.1.9": api.RESTBenchCheck{
		TestNum:     "D.1.1.9",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-docker.socket配置了审计",
		Remediation: "",
	},
	"D.1.1.10": api.RESTBenchCheck{
		TestNum:     "D.1.1.10",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/etc/default/docker配置了审计",
		Remediation: "",
	},
	"D.1.1.11": api.RESTBenchCheck{
		TestNum:     "D.1.1.11",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/etc/docker/daemon.json配置了审计",
		Remediation: "",
	},
	"D.1.1.12": api.RESTBenchCheck{
		TestNum:     "D.1.1.12",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/etc/containerd/config.toml配置了审计",
		Remediation: "",
	},
	"D.1.1.13": api.RESTBenchCheck{
		TestNum:     "D.1.1.13",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/etc/sysconfig/docker配置了审计",
		Remediation: "",
	},
	"D.1.1.14": api.RESTBenchCheck{
		TestNum:     "D.1.1.14",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/usr/bin/containerd配置了审计",
		Remediation: "",
	},
	"D.1.1.15": api.RESTBenchCheck{
		TestNum:     "D.1.1.15",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/usr/bin/containerd-shim配置了审计",
		Remediation: "",
	},
	"D.1.1.16": api.RESTBenchCheck{
		TestNum:     "D.1.1.16",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/usr/bin/containerd-shim-runc-v1配置了审计",
		Remediation: "",
	},
	"D.1.1.17": api.RESTBenchCheck{
		TestNum:     "D.1.1.17",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/usr/bin/containerd-shim-runc-v2配置了审计",
		Remediation: "",
	},
	"D.1.1.18": api.RESTBenchCheck{
		TestNum:     "D.1.1.18",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/usr/bin/runc配置了审计",
		Remediation: "",
	},
	"D.1.2.1": api.RESTBenchCheck{
		TestNum:     "D.1.2.1",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为容器创建了一个单独的分区",
		Remediation: "",
	},
	"D.1.2.2": api.RESTBenchCheck{
		TestNum:     "D.1.2.2",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保只有受信任的用户才能控制Docker守护进程",
		Remediation: "",
	},
	"D.1.2.3": api.RESTBenchCheck{
		TestNum:     "D.1.2.3",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为Docker守护进程配置了审计",
		Remediation: "",
	},
	"D.1.2.4": api.RESTBenchCheck{
		TestNum:     "D.1.2.4",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保为docker文件和目录-/var/lib/docker配置了审计",
		Remediation: "",
	},
	"D.1.2.5": api.RESTBenchCheck{
		TestNum:     "D.1.2.5",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/etc/docker配置了审计",
		Remediation: "",
	},
	"D.1.2.6": api.RESTBenchCheck{
		TestNum:     "D.1.2.6",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-docker.service配置了审计",
		Remediation: "",
	},
	"D.1.2.7": api.RESTBenchCheck{
		TestNum:     "D.1.2.7",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-docker.socket配置了审计",
		Remediation: "",
	},
	"D.1.2.8": api.RESTBenchCheck{
		TestNum:     "D.1.2.8",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/etc/default/docker配置了审计",
		Remediation: "",
	},
	"D.1.2.9": api.RESTBenchCheck{
		TestNum:     "D.1.2.9",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/etc/sysconfig/docker配置了审计",
		Remediation: "",
	},
	"D.1.2.10": api.RESTBenchCheck{
		TestNum:     "D.1.2.10",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/etc/docker/daemon.json配置了审计",
		Remediation: "",
	},
	"D.1.2.11": api.RESTBenchCheck{
		TestNum:     "D.1.2.11",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/usr/bin/containerd配置了审计",
		Remediation: "",
	},
	"D.1.2.12": api.RESTBenchCheck{
		TestNum:     "D.1.2.12",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保为docker文件和目录-/usr/sbin/runc配置了审计",
		Remediation: "",
	},
	"D.2.1": api.RESTBenchCheck{
		TestNum:     "D.2.1",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保限制默认网桥上容器之间的网络流量",
		Remediation: "",
	},
	"D.2.2": api.RESTBenchCheck{
		TestNum:     "D.2.2",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保日志级别设置为INFO",
		Remediation: "",
	},
	"D.2.3": api.RESTBenchCheck{
		TestNum:     "D.2.3",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保允许docker更改iptables",
		Remediation: "",
	},
	"D.2.4": api.RESTBenchCheck{
		TestNum:     "D.2.4",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保不使用不安全的镜像仓库",
		Remediation: "",
	},
	"D.2.5": api.RESTBenchCheck{
		TestNum:     "D.2.5",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保不使用aufs存储驱动程序",
		Remediation: "",
	},
	"D.2.6": api.RESTBenchCheck{
		TestNum:     "D.2.6",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Docker守护进程配置了TLS身份认证",
		Remediation: "",
	},
	"D.2.7": api.RESTBenchCheck{
		TestNum:     "D.2.7",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保配置了合适的ulimit",
		Remediation: "",
	},
	"D.2.8": api.RESTBenchCheck{
		TestNum:     "D.2.8",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保启用用户名称空间",
		Remediation: "",
	},
	"D.2.9": api.RESTBenchCheck{
		TestNum:     "D.2.9",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保使用默认的cgroup",
		Remediation: "",
	},
	"D.2.10": api.RESTBenchCheck{
		TestNum:     "D.2.10",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保设置容器的默认空间大小",
		Remediation: "",
	},
	"D.2.11": api.RESTBenchCheck{
		TestNum:     "D.2.11",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保启用Docker客户端命令的授权",
		Remediation: "",
	},
	"D.2.12": api.RESTBenchCheck{
		TestNum:     "D.2.12",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保配置集中式和远程日志记录",
		Remediation: "",
	},
	"D.2.13": api.RESTBenchCheck{
		TestNum:     "D.2.13",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保启用实时恢复",
		Remediation: "",
	},
	"D.2.14": api.RESTBenchCheck{
		TestNum:     "D.2.14",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保禁用userland代理",
		Remediation: "",
	},
	"D.2.15": api.RESTBenchCheck{
		TestNum:     "D.2.15",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保应用守护进程范围的自定义seccomp配置文件",
		Remediation: "",
	},
	"D.2.16": api.RESTBenchCheck{
		TestNum:     "D.2.16",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保生产环境中避免实验性功能",
		Remediation: "",
	},
	"D.2.17": api.RESTBenchCheck{
		TestNum:     "D.2.17",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "限制容器获得新的特权",
		Remediation: "",
	},
	"D.2.18": api.RESTBenchCheck{
		TestNum:     "D.2.18",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保生产环境中避免实验性功能",
		Remediation: "",
	},
	"D.3.1": api.RESTBenchCheck{
		TestNum:     "D.3.1",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保docker.service文件的所有权为root:root",
		Remediation: "",
	},
	"D.3.2": api.RESTBenchCheck{
		TestNum:     "D.3.2",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保docker.service文件权限被合理设置",
		Remediation: "",
	},
	"D.3.3": api.RESTBenchCheck{
		TestNum:     "D.3.3",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保docker.socket文件所有权为root:root",
		Remediation: "",
	},
	"D.3.4": api.RESTBenchCheck{
		TestNum:     "D.3.4",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保docker.socket文件权限被设置为644或更多限制性",
		Remediation: "",
	},
	"D.3.5": api.RESTBenchCheck{
		TestNum:     "D.3.5",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保/etc/docker的目录所有权为root:root",
		Remediation: "",
	},
	"D.3.6": api.RESTBenchCheck{
		TestNum:     "D.3.6",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保/etc/docker的目录权限为755或更多限制性",
		Remediation: "",
	},
	"D.3.7": api.RESTBenchCheck{
		TestNum:     "D.3.7",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保镜像仓库证书文件所有权为root:root",
		Remediation: "",
	},
	"D.3.8": api.RESTBenchCheck{
		TestNum:     "D.3.8",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保镜像仓库证书文件权限设置为444或更多限制性",
		Remediation: "",
	},
	"D.3.9": api.RESTBenchCheck{
		TestNum:     "D.3.9",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保TLS CA证书文件的所有权为root:root",
		Remediation: "",
	},
	"D.3.10": api.RESTBenchCheck{
		TestNum:     "D.3.10",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保TLS CA证书文件权限为444或更多限制性",
		Remediation: "",
	},
	"D.3.11": api.RESTBenchCheck{
		TestNum:     "D.3.11",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Docker服务器证书文件所有权为root:root",
		Remediation: "",
	},
	"D.3.12": api.RESTBenchCheck{
		TestNum:     "D.3.12",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Docker服务器证书文件权限设置为444或更多限制性",
		Remediation: "",
	},
	"D.3.13": api.RESTBenchCheck{
		TestNum:     "D.3.13",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Docker服务器证书密钥文件的所有权为root:root",
		Remediation: "",
	},
	"D.3.14": api.RESTBenchCheck{
		TestNum:     "D.3.14",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Docker服务器证书密钥文件权限为400",
		Remediation: "",
	},
	"D.3.15": api.RESTBenchCheck{
		TestNum:     "D.3.15",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Docker.sock的文件所有权为root:docker",
		Remediation: "",
	},
	"D.3.16": api.RESTBenchCheck{
		TestNum:     "D.3.16",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Docker.sock的文件权限设置为660或更多限制性",
		Remediation: "",
	},
	"D.3.17": api.RESTBenchCheck{
		TestNum:     "D.3.17",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保daemon.json文件所有权为root:root",
		Remediation: "",
	},
	"D.3.18": api.RESTBenchCheck{
		TestNum:     "D.3.18",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保daemon.json文件权限为644或更多限制性",
		Remediation: "",
	},
	"D.3.19": api.RESTBenchCheck{
		TestNum:     "D.3.19",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保/etc/default/docker文件的所有权为root:root",
		Remediation: "",
	},
	"D.3.20": api.RESTBenchCheck{
		TestNum:     "D.3.20",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保/etc/sysconfig/docker文件的所有权为root:root",
		Remediation: "",
	},
	"D.3.21": api.RESTBenchCheck{
		TestNum:     "D.3.21",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保/etc/sysconfig/docker文件权限为644或更多限制性",
		Remediation: "",
	},
	"D.3.22": api.RESTBenchCheck{
		TestNum:     "D.3.22",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保/etc/default/docker文件权限为644或更多限制性",
		Remediation: "",
	},
	"D.3.23": api.RESTBenchCheck{
		TestNum:     "D.3.23",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保containerd socket文件所有权为root:root",
		Remediation: "",
	},
	"D.3.24": api.RESTBenchCheck{
		TestNum:     "D.3.24",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Containerd socket文件权限被设置为660或更多限制性",
		Remediation: "",
	},
	"D.4.1": api.RESTBenchCheck{
		TestNum:     "D.4.1",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保已经为容器创建了用户",
		Remediation: "",
	},
	"D.4.2": api.RESTBenchCheck{
		TestNum:     "D.4.2",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器使用可信的基础映像",
		Remediation: "",
	},
	"D.4.3": api.RESTBenchCheck{
		TestNum:     "D.4.3",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "请确保容器内只安装了所需的包",
		Remediation: "",
	},
	"D.4.4": api.RESTBenchCheck{
		TestNum:     "D.4.4",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保扫描镜像漏洞并且构建包含安全补丁的镜像",
		Remediation: "",
	},
	"D.4.5": api.RESTBenchCheck{
		TestNum:     "D.4.5",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保启动docker内容信任",
		Remediation: "",
	},
	"D.4.6": api.RESTBenchCheck{
		TestNum:     "D.4.6",
		Type:        "host",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保HEALTHCHECK说明添加到容器镜像",
		Remediation: "",
	},
	"D.4.7": api.RESTBenchCheck{
		TestNum:     "D.4.7",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保不在dockerfile中单独使用更新命令",
		Remediation: "",
	},
	"D.4.8": api.RESTBenchCheck{
		TestNum:     "D.4.8",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保镜像中删除setuid和setgid权限",
		Remediation: "",
	},
	"D.4.9": api.RESTBenchCheck{
		TestNum:     "D.4.9",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保在Dockerfiles中使用COPY而不是ADD",
		Remediation: "",
	},
	"D.4.10": api.RESTBenchCheck{
		TestNum:     "D.4.10",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保涉密信息不存储在dockerfile中",
		Remediation: "",
	},
	"D.4.11": api.RESTBenchCheck{
		TestNum:     "D.4.11",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保仅安装已经验证的软件包",
		Remediation: "",
	},
	"D.6.1": api.RESTBenchCheck{
		TestNum:     "D.6.1",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保避免镜像泛滥",
		Remediation: "",
	},
	"D.6.2": api.RESTBenchCheck{
		TestNum:     "D.6.2",
		Type:        "host",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保避免容器泛滥",
		Remediation: "",
	},
	"D.5.1": api.RESTBenchCheck{
		TestNum:     "D.5.1",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保启用AppArmor配置文件",
		Remediation: "",
	},
	"D.5.2": api.RESTBenchCheck{
		TestNum:     "D.5.2",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保设置SELINUX的安全选项",
		Remediation: "",
	},
	"D.5.3": api.RESTBenchCheck{
		TestNum:     "D.5.3",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Linux内核功能在容器中受到限制",
		Remediation: "",
	},
	"D.5.4": api.RESTBenchCheck{
		TestNum:     "D.5.4",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保不使用特权容器",
		Remediation: "",
	},
	"D.5.5": api.RESTBenchCheck{
		TestNum:     "D.5.5",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保敏感的主机系统目录未挂载在容器上",
		Remediation: "",
	},
	"D.5.6": api.RESTBenchCheck{
		TestNum:     "D.5.6",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保ssh没有在容器中运行",
		Remediation: "",
	},
	"D.5.7": api.RESTBenchCheck{
		TestNum:     "D.5.7",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保禁止特权端口映射到容器内",
		Remediation: "",
	},
	"D.5.8": api.RESTBenchCheck{
		TestNum:     "D.5.8",
		Type:        "container",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保只映射必要的端口",
		Remediation: "",
	},
	"D.5.9": api.RESTBenchCheck{
		TestNum:     "D.5.9",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保不共享主机的网络命名空间",
		Remediation: "",
	},
	"D.5.10": api.RESTBenchCheck{
		TestNum:     "D.5.10",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器的内存使用合理",
		Remediation: "",
	},
	"D.5.11": api.RESTBenchCheck{
		TestNum:     "D.5.11",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确设置容器上的CPU优先级",
		Remediation: "",
	},
	"D.5.12": api.RESTBenchCheck{
		TestNum:     "D.5.12",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器的根文件系统为只读",
		Remediation: "",
	},
	"D.5.13": api.RESTBenchCheck{
		TestNum:     "D.5.13",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保进入容器的流量绑定到特定的主机接口",
		Remediation: "",
	},
	"D.5.14": api.RESTBenchCheck{
		TestNum:     "D.5.14",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器重启策略on-failure设置为5",
		Remediation: "",
	},
	"D.5.15": api.RESTBenchCheck{
		TestNum:     "D.5.15",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保主机的进程命名空间不共享",
		Remediation: "",
	},
	"D.5.16": api.RESTBenchCheck{
		TestNum:     "D.5.16",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保主机的IPC命名空间不共享",
		Remediation: "",
	},
	"D.5.17": api.RESTBenchCheck{
		TestNum:     "D.5.17",
		Type:        "container",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保主机设备不直接共享给容器",
		Remediation: "",
	},
	"D.5.18": api.RESTBenchCheck{
		TestNum:     "D.5.18",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保设置默认的ulimit配置(在需要时)",
		Remediation: "",
	},
	"D.5.19": api.RESTBenchCheck{
		TestNum:     "D.5.19",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保设置装载传播模式不共享",
		Remediation: "",
	},
	"D.5.20": api.RESTBenchCheck{
		TestNum:     "D.5.20",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保主机的UTS命名空间不共享",
		Remediation: "",
	},
	"D.5.21": api.RESTBenchCheck{
		TestNum:     "D.5.21",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保默认的seccomp配置文件未禁用",
		Remediation: "",
	},
	"D.5.22": api.RESTBenchCheck{
		TestNum:     "D.5.22",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保docker exec命令不能使用特权选项",
		Remediation: "",
	},
	"D.5.23": api.RESTBenchCheck{
		TestNum:     "D.5.23",
		Type:        "container",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保docker exec命令不能与user选项一起使用",
		Remediation: "",
	},
	"D.5.24": api.RESTBenchCheck{
		TestNum:     "D.5.24",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保cgroup安全使用",
		Remediation: "",
	},
	"D.5.25": api.RESTBenchCheck{
		TestNum:     "D.5.25",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保限制容器获取额外的特权",
		Remediation: "",
	},
	"D.5.26": api.RESTBenchCheck{
		TestNum:     "D.5.26",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保检查容器运行时状态",
		Remediation: "",
	},
	"D.5.27": api.RESTBenchCheck{
		TestNum:     "D.5.27",
		Type:        "container",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Docker命令始终获取镜像的最新版本",
		Remediation: "",
	},
	"D.5.28": api.RESTBenchCheck{
		TestNum:     "D.5.28",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保限制使用PID cgroup",
		Remediation: "",
	},
	"D.5.29": api.RESTBenchCheck{
		TestNum:     "D.5.29",
		Type:        "container",
		Catalog:     "docker",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保不要使用docker的默认网桥docker0",
		Remediation: "",
	},
	"D.5.30": api.RESTBenchCheck{
		TestNum:     "D.5.30",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保不共享主机的用户命名空间",
		Remediation: "",
	},
	"D.5.31": api.RESTBenchCheck{
		TestNum:     "D.5.31",
		Type:        "container",
		Catalog:     "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保任何容器内不能安装docker套接字",
		Remediation: "",
	},
	"K.1.1.1": api.RESTBenchCheck{
		TestNum:     "K.1.1.1",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保kube-apiserver pod规范文件权限设置为644或更多限制性",
		Remediation: "在master节点上运行以下命令. 例如, chmod 644 /etc/kubernetes/manifests/kube-apiserver.yaml",
	},
	"K.1.1.2": api.RESTBenchCheck{
		TestNum:     "K.1.1.2",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保kube-apiserver pod规范文件的所有权为root:root",
		Remediation: "在master节点上运行以下命令. 例如, chown root:root /etc/kubernetes/manifests/kube-apiserver.yaml",
	},
	"K.1.1.3": api.RESTBenchCheck{
		TestNum:     "K.1.1.3",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保kube-controller-manager pod规格文件权限为644或更多限制性",
		Remediation: "在master节点上运行以下命令. 例如,  chmod 644 /etc/kubernetes/manifests/kube-controller-manager.yaml",
	},
	"K.1.1.4": api.RESTBenchCheck{
		TestNum:     "K.1.1.4",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保kube-controller-manager pod规格文件的所有权设置为root:root",
		Remediation: "在master节点上运行以下命令. 例如,  chown root:root /etc/kubernetes/manifests/kube-controller-manager.yaml",
	},
	"K.1.1.5": api.RESTBenchCheck{
		TestNum:     "K.1.1.5",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保kube-scheduler pod规范文件权限为644或更多限制性",
		Remediation: "在master节点上运行以下命令. 例如, chmod 644 /etc/kubernetes/manifests/kube-scheduler.yaml",
	},
	"K.1.1.6": api.RESTBenchCheck{
		TestNum:     "K.1.1.6",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保kube-scheduler pod规范文件的所有权设置为root:root",
		Remediation: "在master节点上运行以下命令. 例如, chown root:root /etc/kubernetes/manifests/kube-scheduler.yaml",
	},
	"K.1.1.7": api.RESTBenchCheck{
		TestNum:     "K.1.1.7",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保etcd pod规格文件权限为644或更多限制性",
		Remediation: "在master节点上运行以下命令. 例如, chmod 644 /etc/kubernetes/manifests/etcd.yaml",
	},
	"K.1.1.8": api.RESTBenchCheck{
		TestNum:     "K.1.1.8",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保etcd pod规格文件的所有权设置为root:root",
		Remediation: "在master节点上运行以下命令. 例如, chown root:root /etc/kubernetes/manifests/etcd.yaml",
	},
	"K.1.1.9": api.RESTBenchCheck{
		TestNum:     "K.1.1.9",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器网络接口文件权限设置为644或更多限制性",
		Remediation: "在master节点上运行以下命令. 例如,  chmod 644 <path/to/cni/files>",
	},
	"K.1.1.10": api.RESTBenchCheck{
		TestNum:     "K.1.1.10",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器网络接口文件的所有权为root:root",
		Remediation: "在master节点上运行以下命令. 例如,chown root:root <path/to/cni/files>",
	},
	"K.1.1.11": api.RESTBenchCheck{
		TestNum:     "K.1.1.11",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保etcd数据目录权限为700或更多限制性",
		Remediation: "在etcd服务器节点上，从下面的命令中获取etcd数据目录，参数--data-dir: ps -ef | grep etcd Run the below command (based on the etcd data directory found above). For example, chmod 700 /var/lib/etcd",
	},
	"K.1.1.12": api.RESTBenchCheck{
		TestNum:     "K.1.1.12",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "请确保etcd数据目录的所有权为etcd:etcd",
		Remediation: "在etcd服务器节点上，从下面的命令中获取etcd数据目录，参数 --data-dir, from the below command: ps -ef | grep etcd Run the below command (based on the etcd data directory found above). For example, chown etcd:etcd /var/lib/etcd",
	},
	"K.1.1.13": api.RESTBenchCheck{
		TestNum:     "K.1.1.13",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保admin.conf文件权限为644或更多限制性",
		Remediation: "在master节点上运行以下命令. 例如, chmod 644 /etc/kubernetes/admin.conf",
	},
	"K.1.1.14": api.RESTBenchCheck{
		TestNum:     "K.1.1.14",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保admin.conf文件所有权为root:root",
		Remediation: "在master节点上运行以下命令. 例如, chown root:root /etc/kubernetes/admin.conf",
	},
	"K.1.1.15": api.RESTBenchCheck{
		TestNum:     "K.1.1.15",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保scheduler.conf文件权限为644或更多限制性",
		Remediation: "在master节点上运行以下命令. 例如, chmod 644 /etc/kubernetes/scheduler.conf",
	},
	"K.1.1.16": api.RESTBenchCheck{
		TestNum:     "K.1.1.16",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保scheduler.conf文件的所有权为root:root",
		Remediation: "在master节点上运行以下命令. 例如, chown root:root /etc/kubernetes/scheduler.conf",
	},
	"K.1.1.17": api.RESTBenchCheck{
		TestNum:     "K.1.1.17",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保controller-manager.conf文件的权限为644或更多限制性",
		Remediation: "在master节点上运行以下命令. 例如, chmod 644 /etc/kubernetes/controller-manager.conf",
	},
	"K.1.1.18": api.RESTBenchCheck{
		TestNum:     "K.1.1.18",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保controller-manager.conf文件的所有权为root:root",
		Remediation: "在master节点上运行以下命令. 例如, chown root:root /etc/kubernetes/controller-manager.conf",
	},
	"K.1.1.19": api.RESTBenchCheck{
		TestNum:     "K.1.1.19",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Kubernetes PKI目录和文件所有权为root:root",
		Remediation: "在master节点上运行以下命令. 例如, chown -R root:root /etc/kubernetes/pki/",
	},
	"K.1.1.20": api.RESTBenchCheck{
		TestNum:     "K.1.1.20",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Kubernetes PKI证书文件的权限设置为644或以上限制",
		Remediation: "在master节点上运行以下命令. 例如, chmod -R 644 /etc/kubernetes/pki/*.crt",
	},
	"K.1.1.21": api.RESTBenchCheck{
		TestNum:     "K.1.1.21",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Kubernetes的PKI密钥文件权限设置为6000",
		Remediation: "在master节点上运行以下命令. 例如, chmod -R 600 /etc/kubernetes/pki/*.key",
	},
	"K.1.2.1": api.RESTBenchCheck{
		TestNum:     "K.1.2.1",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--anonymous-auth参数设置为false",
		Remediation: "在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml且文件中拥有参数--anonymous-auth=false",
	},
	"K.1.2.2": api.RESTBenchCheck{
		TestNum:     "K.1.2.2",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保没有设置--basic-auth-file参数",
		Remediation: "遵循文档并配置用于身份验证的替代机制. 在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml且移除参数--basic-auth-file=<filename>.",
	},
	"K.1.2.3": api.RESTBenchCheck{
		TestNum:     "K.1.2.3",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保没有设置--token-auth-file参数",
		Remediation: "遵循文档并配置用于身份验证的替代机制. 在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml且移除参数--token-auth-file=<filename>.",
	},
	"K.1.2.4": api.RESTBenchCheck{
		TestNum:     "K.1.2.4",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--kubelet-https参数设置为true",
		Remediation: "在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml且移除参数--kubelet-https.",
	},
	"K.1.2.5": api.RESTBenchCheck{
		TestNum:     "K.1.2.5",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--kubelet-client-certificate和--kubelet-client-key参数设置为合适的值",
		Remediation: "遵循Kubernetes文档，建立apiserver和kubelets之间的TLS连接. 在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml 且按如下所示设置kubelet客户端证书和关键参数--kubelet-client-certificate=<path/to/client-certificate-file> --kubelet-client-key=<path/to/client-key-file>",
	},
	"K.1.2.6": api.RESTBenchCheck{
		TestNum:     "K.1.2.6",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--kubelet-certificate-authority参数设置为合适的值",
		Remediation: "遵循Kubernetes文档，建立apiserver和kubelets之间的TLS连接. 在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml 并设置--kubelet-certificate-authority参数为证书颁发机构的证书文件路径--kubelet-certificate-authority=<ca-string>",
	},
	"K.1.2.7": api.RESTBenchCheck{
		TestNum:     "K.1.2.7",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--authorization-mode参数没有设置为AlwaysAllow",
		Remediation: "在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml 并将--authorization-mode参数设置为AlwaysAllow以外的值. 例子. --authorization-mode=RBAC",
	},
	"K.1.2.8": api.RESTBenchCheck{
		TestNum:     "K.1.2.8",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--authorization-mode参数包含Node",
		Remediation: "在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml 并将--authorization-mode参数设置为包含Node的值. --authorization-mode=Node,RBAC",
	},
	"K.1.2.9": api.RESTBenchCheck{
		TestNum:     "K.1.2.9",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--authorization-mode参数包含RBAC",
		Remediation: "在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml 并将--authorization-mode参数设置为包含RBAC的值. 例子:--authorization-mode=Node,RBAC",
	},
	"K.1.2.10": api.RESTBenchCheck{
		TestNum:     "K.1.2.10",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保设置了准入控制器插件EventRateLimit",
		Remediation: "遵循Kubernetes文档并在配置文件中设置所需的限制. 在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml且设置以下参数.  --enable-admission-plugins=...,EventRateLimit,... --admission-control-config-file=<path/to/configuration/file>",
	},
	"K.1.2.11": api.RESTBenchCheck{
		TestNum:     "K.1.2.11",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保没有设置准入控制器插件AlwaysAdmit",
		Remediation: "在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml或者去掉--enable-admission-plugins参数, 或将其设置为不包括AlwaysAdmit的值.",
	},
	"K.1.2.12": api.RESTBenchCheck{
		TestNum:     "K.1.2.12",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保设置了准入控制器插件AlwaysPullImages",
		Remediation: "在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml并设置--enable-admission-plugins参数,以包含AlwaysPullImages.--enable-admission-plugins=...,AlwaysPullImages,...",
	},
	"K.1.2.13": api.RESTBenchCheck{
		TestNum:     "K.1.2.13",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "如果不使用PodSecurityPolicy，请确保设置了准入控制器插件SecurityContextDeny",
		Remediation: "在master节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml并设置--enable-admission-plugins参数,以包含SecurityContextDeny, 除非PodSecurityPolicy已经就位. --enable-admission-plugins=...,SecurityContextDeny,...",
	},
	"K.1.2.14": api.RESTBenchCheck{
		TestNum:     "K.1.2.14",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保设置了准入控制器插件ServiceAccount",
		Remediation: "Follow the documentation and create ServiceAccount objects as per your environment. Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and ensure that the --disable-admission-plugins parameter is set to a value that does not include ServiceAccount.",
	},
	"K.1.2.15": api.RESTBenchCheck{
		TestNum:     "K.1.2.15",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保设置了准入控制器插件NamespaceLifecycle",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the --disable-admission-plugins parameter to ensure it does not include NamespaceLifecycle.",
	},
	"K.1.2.16": api.RESTBenchCheck{
		TestNum:     "K.1.2.16",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保设置了准入控制器插件PodSecurityPolicy",
		Remediation: "Follow the documentation and create Pod Security Policy objects as per your environment. Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the --enable-admission-plugins parameter to a value that includes PodSecurityPolicy: --enable-admission-plugins=...,PodSecurityPolicy,... Then restart the API Server.",
	},
	"K.1.2.17": api.RESTBenchCheck{
		TestNum:     "K.1.2.17",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保设置了准入控制器插件NodeRestriction",
		Remediation: "Follow the Kubernetes documentation and configure NodeRestriction plug-in on kubelets. Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the --enable-admission-plugins parameter to a value that includes NodeRestriction. --enable-admission-plugins=...,NodeRestriction,...",
	},
	"K.1.2.18": api.RESTBenchCheck{
		TestNum:     "K.1.2.18",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保没有设置参数--insecure-bind-address",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and remove the --insecure-bind-address parameter.",
	},
	"K.1.2.19": api.RESTBenchCheck{
		TestNum:     "K.1.2.19",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--insecure-port参数设置为0",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the below parameter. --insecure-port=0",
	},
	"K.1.2.20": api.RESTBenchCheck{
		TestNum:     "K.1.2.20",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--secure-port参数没有设置为0",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and either remove the --secure-port parameter or set it to a different (non-zero) desired port.",
	},
	"K.1.2.21": api.RESTBenchCheck{
		TestNum:     "K.1.2.21",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--profiling参数被设置为false",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the below parameter. --profiling=false",
	},
	"K.1.2.22": api.RESTBenchCheck{
		TestNum:     "K.1.2.22",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保设置了参数--audit-log-path",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the --audit-log-path parameter to a suitable path and file where you would like audit logs to be written, for example: --audit-log-path=/var/log/apiserver/audit.log",
	},
	"K.1.2.23": api.RESTBenchCheck{
		TestNum:     "K.1.2.23",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--audit-log-maxage参数设置为30或适当的值",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the --audit-log-maxage parameter to 30 or as an appropriate number of days: --audit-log-maxage=30",
	},
	"K.1.2.24": api.RESTBenchCheck{
		TestNum:     "K.1.2.24",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--audit-log-maxbackup参数设置为10或适当的值",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the --audit-log-maxbackup parameter to 10 or to an appropriate value. --audit-log-maxbackup=10",
	},
	"K.1.2.25": api.RESTBenchCheck{
		TestNum:     "K.1.2.25",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--audit-log-maxsize参数设置为100或适当的值",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the --audit-log-maxsize parameter to an appropriate size in MB. For example, to set it as 100 MB: --audit-log-maxsize=100",
	},
	"K.1.2.26": api.RESTBenchCheck{
		TestNum:     "K.1.2.26",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保适当地设置--request-timeout参数",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml and set the below parameter as appropriate and if needed. For example, --request-timeout=300s",
	},
	"K.1.2.27": api.RESTBenchCheck{
		TestNum:     "K.1.2.27",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--service-account-lookup参数设置为true",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the below parameter. --service-account-lookup=true",
	},
	"K.1.2.28": api.RESTBenchCheck{
		TestNum:     "K.1.2.28",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--service-account-key-file参数被适当地设置",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the --service-account-key-file parameter to the public key file for service accounts: --service-account-key-file=<filename>",
	},
	"K.1.2.29": api.RESTBenchCheck{
		TestNum:     "K.1.2.29",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--etc -certfile和--etc -keyfile参数被适当地设置",
		Remediation: "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the etcd certificate and key file parameters.  --etcd-certfile=<path/to/client-certificate-file> --etcd-keyfile=<path/to/client-key-file>",
	},
	"K.1.2.30": api.RESTBenchCheck{
		TestNum:     "K.1.2.30",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--tls-cert-file和--tls-private-key-file参数被适当地设置",
		Remediation: "Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the TLS certificate and private key file parameters. --tls-cert-file=<path/to/tls-certificate-file> --tls-private-key-file=<path/to/tls-key-file>",
	},
	"K.1.2.31": api.RESTBenchCheck{
		TestNum:     "K.1.2.31",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保适当地设置了--client-ca-file参数",
		Remediation: "Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the client certificate authority file. --client-ca-file=<path/to/client-ca-file>",
	},
	"K.1.2.32": api.RESTBenchCheck{
		TestNum:     "K.1.2.32",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--etcd-cafile参数被适当地设置",
		Remediation: "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the etcd certificate authority file parameter. --etcd-cafile=<path/to/ca-file>",
	},
	"K.1.2.33": api.RESTBenchCheck{
		TestNum:     "K.1.2.33",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保适当地设置--encryption-provider-config参数",
		Remediation: "Follow the Kubernetes documentation and configure a EncryptionConfig file. Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the --encryption-provider-config parameter to the path of that file: --encryption-provider-config=</path/to/EncryptionConfig/File>",
	},
	"K.1.2.34": api.RESTBenchCheck{
		TestNum:     "K.1.2.34",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确配置加密提供程序",
		Remediation: "Follow the Kubernetes documentation and configure a EncryptionConfig file. In this file, choose aescbc, kms or secretbox as the encryption provider.",
	},
	"K.1.2.35": api.RESTBenchCheck{
		TestNum:     "K.1.2.35",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保API服务器只使用强加密密码",
		Remediation: "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the below parameter as follows, or to a subset of these values. --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM _SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM _SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM _SHA384",
	},
	"K.1.3.1": api.RESTBenchCheck{
		TestNum:     "K.1.3.1",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保适当地设置--terminate -pod-gc-threshold参数",
		Remediation: "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml on the master node and set the --terminated-pod-gc-threshold to an appropriate threshold, for example: --terminated-pod-gc-threshold=10",
	},
	"K.1.3.2": api.RESTBenchCheck{
		TestNum:     "K.1.3.2",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--profiling参数被设置为false",
		Remediation: "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml on the master node and set the below parameter. --profiling=false",
	},
	"K.1.3.3": api.RESTBenchCheck{
		TestNum:     "K.1.3.3",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--use-service-account-credentials参数设置为true",
		Remediation: "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml on the master node to set the below parameter. --use-service-account-credentials=true",
	},
	"K.1.3.4": api.RESTBenchCheck{
		TestNum:     "K.1.3.4",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--service-account-private-key-file参数被适当地设置",
		Remediation: "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml on the master node and set the --service-account-private- key-file parameter to the private key file for service accounts. --service-account-private-key-file=<filename>",
	},
	"K.1.3.5": api.RESTBenchCheck{
		TestNum:     "K.1.3.5",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--root-ca-file参数被适当地设置",
		Remediation: "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml on the master node and set the --root-ca-file parameter to the certificate bundle file`. --root-ca-file=<path/to/file>",
	},
	"K.1.3.6": api.RESTBenchCheck{
		TestNum:     "K.1.3.6",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保RotateKubeletServerCertificate参数设置为true",
		Remediation: "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml on the master node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true. --feature-gates=RotateKubeletServerCertificate=true",
	},
	"K.1.3.7": api.RESTBenchCheck{
		TestNum:     "K.1.3.7",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--bind-address参数设置为127.0.0.1",
		Remediation: "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml on the master node and ensure the correct value for the --bind-address parameter.",
	},
	"K.1.4.1": api.RESTBenchCheck{
		TestNum:     "K.1.4.1",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--profiling参数被设置为false",
		Remediation: "Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-scheduler.yaml file on the master node and set the below parameter. --profiling=false",
	},
	"K.1.4.2": api.RESTBenchCheck{
		TestNum:     "K.1.4.2",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--bind-address参数设置为127.0.0.1",
		Remediation: "Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-scheduler.yaml on the master node and ensure the correct value for the --bind-address parameter",
	},
	"K.2.1": api.RESTBenchCheck{
		TestNum:     "K.2.1",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--cert-file和--key-file参数被适当地设置",
		Remediation: "Follow the etcd service documentation and configure TLS encryption. Then, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master node and set the below parameters.  --cert-file=</path/to/ca-file> --key-file=</path/to/key-file>",
	},
	"K.2.2": api.RESTBenchCheck{
		TestNum:     "K.2.2",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--client-cert-auth参数设置为true",
		Remediation: "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master node and set the below parameter. --client-cert-auth=\"true\"",
	},
	"K.2.3": api.RESTBenchCheck{
		TestNum:     "K.2.3",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--auto-tls参数没有设置为true",
		Remediation: "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master node and either remove the --auto-tls parameter or set it to false. --auto-tls=false",
	},
	"K.2.4": api.RESTBenchCheck{
		TestNum:     "K.2.4",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--peer-cert-file和--peer-key-file参数被适当地设置",
		Remediation: "Follow the etcd service documentation and configure peer TLS encryption as appropriate for your etcd cluster. Then, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master node and set the below parameters.  --peer-cert-file=</path/to/peer-cert-file> --peer-key-file=</path/to/peer-key-file>",
	},
	"K.2.5": api.RESTBenchCheck{
		TestNum:     "K.2.5",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--peer-client-cert-auth参数设置为true",
		Remediation: "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master node and set the below parameter. --peer-client-cert-auth=true",
	},
	"K.2.6": api.RESTBenchCheck{
		TestNum:     "K.2.6",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--peer-auto-tls参数没有设置为true",
		Remediation: "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master node and either remove the --peer-auto-tls parameter or set it to false. --peer-auto-tls=false",
	},
	"K.2.7": api.RESTBenchCheck{
		TestNum:     "K.2.7",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保etcd使用唯一的证书颁发机构",
		Remediation: "Follow the etcd documentation and create a dedicated certificate authority setup for the etcd service. Then, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master node and set the below parameter. --trusted-ca-file=</path/to/ca-file>",
	},
	"K.3.1.1": api.RESTBenchCheck{
		TestNum:     "K.3.1.1",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "用户不能使用客户端证书进行认证",
		Remediation: "Alternative mechanisms provided by Kubernetes such as the use of OIDC should be implemented in place of client certificates.",
	},
	"K.3.2.1": api.RESTBenchCheck{
		TestNum:     "K.3.2.1",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保创建了最小审计策略",
		Remediation: "Create an audit policy file for your cluster.",
	},
	"K.3.2.2": api.RESTBenchCheck{
		TestNum:     "K.3.2.2",
		Type:        "master",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保审计策略涵盖了关键的安全问题",
		Remediation: "Consider modification of the audit policy in use on the cluster to include these items, at a minimum.",
	},
	"K.4.1.1": api.RESTBenchCheck{
		TestNum:     "K.4.1.1",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "请确保kubelet服务文件权限设置为644或更严格",
		Remediation: "Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf",
	},
	"K.4.1.2": api.RESTBenchCheck{
		TestNum:     "K.4.1.2",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保kubelet服务的文件所有权设置为root:root",
		Remediation: "Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root /etc/systemd/system/kubelet.service.d/10-kubeadm.conf",
	},
	"K.4.1.3": api.RESTBenchCheck{
		TestNum:     "K.4.1.3",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保kubecconfig代理文件权限设置为644或更多限制",
		Remediation: "Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 <proxy kubeconfig file",
	},
	"K.4.1.4": api.RESTBenchCheck{
		TestNum:     "K.4.1.4",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保kubecconfig代理文件的所有权设置为root:root",
		Remediation: "Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root <proxy kubeconfig file>",
	},
	"K.4.1.5": api.RESTBenchCheck{
		TestNum:     "K.4.1.5",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保kubelet.conf文件权限设置为644或更多限制",
		Remediation: "Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 /etc/kubernetes/kubelet.conf",
	},
	"K.4.1.6": api.RESTBenchCheck{
		TestNum:     "K.4.1.6",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保kubelet.conf文件的所有权设置为root:root",
		Remediation: "Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root /etc/kubernetes/kubelet.conf",
	},
	"K.4.1.7": api.RESTBenchCheck{
		TestNum:     "K.4.1.7",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "请确保证书颁发机构的文件权限设置为644或更多限制",
		Remediation: "Run the following command to modify the file permissions of the --client-ca-file chmod 644 <filename>",
	},
	"K.4.1.8": api.RESTBenchCheck{
		TestNum:     "K.4.1.8",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "请确保客户端证书颁发机构的文件所有权设置为root:root",
		Remediation: "Run the following command to modify the ownership of the --client-ca-file. chown root:root <filename>",
	},
	"K.4.1.9": api.RESTBenchCheck{
		TestNum:     "K.4.1.9",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保kubelet配置文件的权限设置为644或更多限制",
		Remediation: "Run the following command (using the config file location identied in the Audit step) chmod 644 /var/lib/kubelet/config.yaml",
	},
	"K.4.1.10": api.RESTBenchCheck{
		TestNum:     "K.4.1.10",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保kubelet配置文件的所有权设置为root:root",
		Remediation: "Run the following command (using the config file location identied in the Audit step) chown root:root /etc/kubernetes/kubelet.conf",
	},
	"K.4.2.1": api.RESTBenchCheck{
		TestNum:     "K.4.2.1",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保将anonymous-auth参数设置为false",
		Remediation: "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to false. If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. --anonymous-auth=false Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.2": api.RESTBenchCheck{
		TestNum:     "K.4.2.2",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保--authorization-mode参数没有设置为AlwaysAllow",
		Remediation: "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable. --authorization-mode=Webhook Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.3": api.RESTBenchCheck{
		TestNum:     "K.4.2.3",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保适当地设置了--client-ca-file参数",
		Remediation: "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to the location of the client CA file. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable. --client-ca-file=<path/to/client-ca-file> Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.4": api.RESTBenchCheck{
		TestNum:     "K.4.2.4",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保--read-only-port参数设置为0",
		Remediation: "If using a Kubelet config file, edit the file to set readOnlyPort to 0. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. --read-only-port=0 Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.5": api.RESTBenchCheck{
		TestNum:     "K.4.2.5",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保--stream-connection-idle-timeout参数没有设置为0",
		Remediation: "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a value other than 0. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. --streaming-connection-idle-timeout=5m Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.6": api.RESTBenchCheck{
		TestNum:     "K.4.2.6",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--protect-kernel-defaults参数设置为true",
		Remediation: "If using a Kubelet config file, edit the file to set protectKernelDefaults: true. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. --protect-kernel-defaults=true Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.7": api.RESTBenchCheck{
		TestNum:     "K.4.2.7",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--make-iptables-util-chains参数设置为true",
		Remediation: "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --make-iptables-util-chains argument from the KUBELET_SYSTEM_PODS_ARGS variable. Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.8": api.RESTBenchCheck{
		TestNum:     "K.4.2.8",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保没有设置--hostname-override参数",
		Remediation: "Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --hostname-override argument from the KUBELET_SYSTEM_PODS_ARGS variable. Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.9": api.RESTBenchCheck{
		TestNum:     "K.4.2.9",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   true,
		Description: "确保--event-qps参数设置为0或确保适当的事件捕获级别",
		Remediation: "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.10": api.RESTBenchCheck{
		TestNum:     "K.4.2.10",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保--tls-cert-file和--tls-private-key-file参数被适当地设置",
		Remediation: "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.  --tls-cert-file=<path/to/tls-certificate-file> --tls-private-key- file=<path/to/tls-key-file> Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.11": api.RESTBenchCheck{
		TestNum:     "K.4.2.11",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保--rotate-certificates参数没有设置为false",
		Remediation: "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or remove it altogether to use the default value. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS variable. Based on your system, restart the kubelet service. For example: systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.12": api.RESTBenchCheck{
		TestNum:     "K.4.2.12",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保RotateKubeletServerCertificate参数设置为true",
		Remediation: "On the master edit /var/lib/kubelet/kubeadm-flags.env and set the parameter KUBELET_CERTIFICATE_ARGS --feature-gates=RotateKubeletServerCertificate=true or as an alternative, and suggested as a last resort, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable. --feature-gates=RotateKubeletServerCertificate=true Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
	"K.4.2.13": api.RESTBenchCheck{
		TestNum:     "K.4.2.13",
		Type:        "worker",
		Catalog:     "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保Kubelet只使用强密码密码",
		Remediation: "If using a Kubelet config file, edit the file to set TLSCipherSuites: to TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 or to a subset of these values. If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the --tls-cipher-suites parameter as follows, or to a subset of these values. --tls-cipher- suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM _SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM _SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM _SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service",
	},
}
